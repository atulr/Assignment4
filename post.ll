; ModuleID = 'rt.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-apple-darwin11.1"

declare i32 @llvm.trax.loadi(i32, i32) nounwind

declare float @llvm.trax.loadf(i32, i32) nounwind

declare void @llvm.trax.storef(float, i32, i32) nounwind

declare float @llvm.trax.invsqrt(float) nounwind

define i32 @main() nounwind ssp {
entry:
  %0 = tail call i32 @llvm.trax.loadi(i32 0, i32 1)
  %1 = tail call i32 @llvm.trax.loadi(i32 0, i32 4)
  %2 = tail call i32 @llvm.trax.loadi(i32 0, i32 7) nounwind
  %3 = tail call i32 @llvm.trax.loadi(i32 0, i32 12)
  %4 = tail call float @llvm.trax.loadf(i32 %3, i32 0) nounwind
  %5 = tail call float @llvm.trax.loadf(i32 %3, i32 1) nounwind
  %6 = tail call float @llvm.trax.loadf(i32 %3, i32 2) nounwind
  %7 = tail call i32 @llvm.trax.loadi(i32 0, i32 10)
  %8 = tail call float @llvm.trax.loadf(i32 %7, i32 0) nounwind
  %9 = tail call float @llvm.trax.loadf(i32 %7, i32 1) nounwind
  %10 = tail call float @llvm.trax.loadf(i32 %7, i32 2) nounwind
  %11 = add nsw i32 %7, 9
  %12 = tail call float @llvm.trax.loadf(i32 %11, i32 0) nounwind
  %13 = tail call float @llvm.trax.loadf(i32 %11, i32 1) nounwind
  %14 = tail call float @llvm.trax.loadf(i32 %11, i32 2) nounwind
  %15 = add nsw i32 %7, 12
  %16 = tail call float @llvm.trax.loadf(i32 %15, i32 0) nounwind
  %17 = tail call float @llvm.trax.loadf(i32 %15, i32 1) nounwind
  %18 = tail call float @llvm.trax.loadf(i32 %15, i32 2) nounwind
  %19 = add nsw i32 %7, 15
  %20 = tail call float @llvm.trax.loadf(i32 %19, i32 0) nounwind
  %21 = tail call float @llvm.trax.loadf(i32 %19, i32 1) nounwind
  %22 = tail call float @llvm.trax.loadf(i32 %19, i32 2) nounwind
  %23 = add nsw i32 %7, 18
  %24 = tail call float @llvm.trax.loadf(i32 %23, i32 0) nounwind
  %25 = tail call float @llvm.trax.loadf(i32 %23, i32 1) nounwind
  %26 = tail call float @llvm.trax.loadf(i32 %23, i32 2) nounwind
  %27 = tail call i32 @llvm.trax.loadi(i32 0, i32 28)
  %28 = tail call i32 @llvm.trax.loadi(i32 0, i32 29)
  %29 = tail call i32 @llvm.trax.atominc(i32 0)
  %30 = mul nsw i32 %1, %0
  %31 = sitofp i32 %0 to float
  %32 = fdiv float %31, -2.000000e+00
  %33 = sitofp i32 %1 to float
  %34 = fdiv float %33, -2.000000e+00
  %35 = icmp sgt i32 %30, %29
  br i1 %35, label %bb.lr.ph, label %return

bb.lr.ph:                                         ; preds = %entry
  %tmp449 = bitcast float %8 to i32
  %tmp450 = zext i32 %tmp449 to i192
  %tmp402 = bitcast float %9 to i32
  %tmp403 = zext i32 %tmp402 to i192
  %tmp404 = shl nuw nsw i192 %tmp403, 32
  %tmp392 = bitcast float %10 to i32
  %tmp393 = zext i32 %tmp392 to i192
  %tmp394 = shl nuw nsw i192 %tmp393, 64
  %mask395.masked.masked = or i192 %tmp404, %tmp450
  %mask443.masked = or i192 %mask395.masked.masked, %tmp394
  %36 = icmp sgt i32 %28, 0
  %37 = trunc i192 %mask443.masked to i96
  %tmp690 = lshr i96 %37, 32
  %tmp691 = trunc i96 %tmp690 to i32
  %tmp692 = bitcast i32 %tmp691 to float
  %tmp694 = lshr i96 %37, 64
  %tmp695 = trunc i96 %tmp694 to i32
  %tmp696 = bitcast i32 %tmp695 to float
  %tmp1934 = zext i32 %tmp449 to i96
  %tmp1929 = trunc i192 %tmp404 to i96
  %ins1931 = or i96 %tmp1929, %tmp1934
  %tmp1373 = zext i96 %ins1931 to i128
  %tmp729 = zext i32 %tmp392 to i128
  %tmp1368 = shl nuw nsw i128 %tmp729, 64
  %mask1369 = or i128 %tmp1373, %tmp1368
  br label %bb

bb:                                               ; preds = %bb12, %bb.lr.ph
  %storemerge837 = phi i32 [ %29, %bb.lr.ph ], [ %360, %bb12 ]
  %memtmp4.i92.1830 = phi i128 [ undef, %bb.lr.ph ], [ %memtmp4.i92.0.lcssa, %bb12 ]
  %memtmp46.i.2826 = phi i128 [ undef, %bb.lr.ph ], [ %memtmp46.i.1.lcssa, %bb12 ]
  %memtmp103.i.2823 = phi i128 [ undef, %bb.lr.ph ], [ %memtmp103.i.1.lcssa, %bb12 ]
  %memtmp113.i.2822 = phi i128 [ undef, %bb.lr.ph ], [ %memtmp113.i.1.lcssa, %bb12 ]
  %memtmp.1819 = phi i128 [ undef, %bb.lr.ph ], [ %memtmp.0.lcssa, %bb12 ]
  %mask385705818 = phi i512 [ undef, %bb.lr.ph ], [ %mask385707.lcssa, %bb12 ]
  %38 = sdiv i32 %storemerge837, %0
  %39 = srem i32 %storemerge837, %0
  %40 = sitofp i32 %39 to float
  %41 = fadd float %40, %32
  %42 = fadd float %41, 5.000000e-01
  %43 = fmul float %42, 2.000000e+00
  %44 = fdiv float %43, %31
  %45 = sitofp i32 %38 to float
  %46 = fadd float %45, %34
  %47 = fadd float %46, 5.000000e-01
  %48 = fmul float %47, 2.000000e+00
  %49 = fdiv float %48, %33
  %50 = fmul float %24, %49
  %51 = fmul float %25, %49
  %52 = fmul float %26, %49
  %53 = fmul float %20, %44
  %54 = fmul float %21, %44
  %55 = fmul float %22, %44
  %56 = fadd float %50, %53
  %57 = fadd float %51, %54
  %58 = fadd float %55, %52
  %59 = fadd float %56, %16
  %60 = fadd float %57, %17
  %61 = fadd float %18, %58
  %62 = fmul float %59, %59
  %63 = fmul float %60, %60
  %64 = fadd float %62, %63
  %65 = fmul float %61, %61
  %66 = fadd float %64, %65
  %67 = tail call float @llvm.trax.invsqrt(float %66) nounwind
  %68 = fdiv float 1.000000e+00, %67
  %69 = fdiv float %61, %68
  %70 = fdiv float %60, %68
  %71 = fdiv float %59, %68
  %tmp438 = bitcast float %71 to i32
  %tmp439 = zext i32 %tmp438 to i192
  %tmp442 = shl nuw nsw i192 %tmp439, 96
  %tmp426 = bitcast float %70 to i32
  %tmp427 = zext i32 %tmp426 to i192
  %tmp428 = shl nuw nsw i192 %tmp427, 128
  %tmp412 = bitcast float %69 to i32
  %tmp413 = zext i32 %tmp412 to i192
  %tmp414 = shl nuw i192 %tmp413, 160
  %mask429.masked = or i192 %tmp428, %mask443.masked
  %mask415 = or i192 %mask429.masked, %tmp442
  %ins416 = or i192 %mask415, %tmp414
  %mask360 = and i512 %mask385705818, -726838724295606890549323807878830539891817061676795686782676873123622580271327503353597348126162915664230802099766744271117060969332736
  %ins361 = or i512 %mask360, 1343554297
  %72 = mul nsw i32 %38, %0
  %73 = add nsw i32 %72, %39
  %74 = mul nsw i32 %73, 3
  %75 = add nsw i32 %74, %2
  br i1 %36, label %bb1.lr.ph, label %bb12

bb1.lr.ph:                                        ; preds = %bb
  %sroa.store.elt = lshr i192 %ins416, 96
  %tmp675 = trunc i192 %sroa.store.elt to i32
  %tmp676 = bitcast i32 %tmp675 to float
  %tmp682719 = lshr i192 %ins416, 160
  %tmp683 = trunc i192 %tmp682719 to i32
  %tmp684 = bitcast i32 %tmp683 to float
  %76 = fmul float %tmp676, %tmp676
  %77 = fmul float %70, %70
  %78 = fadd float %76, %77
  br label %bb1

bb1:                                              ; preds = %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit, %bb1.lr.ph
  %storemerge1799 = phi i32 [ 0, %bb1.lr.ph ], [ %359, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp4.i92.0792 = phi i128 [ %memtmp4.i92.1830, %bb1.lr.ph ], [ %ins1392, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp46.i.1788 = phi i128 [ %memtmp46.i.2826, %bb1.lr.ph ], [ %memtmp46.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp103.i.1785 = phi i128 [ %memtmp103.i.2823, %bb1.lr.ph ], [ %memtmp103.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp113.i.1784 = phi i128 [ %memtmp113.i.2822, %bb1.lr.ph ], [ %memtmp113.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp.0781 = phi i128 [ %memtmp.1819, %bb1.lr.ph ], [ %ins, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %mask385707780 = phi i512 [ %ins361, %bb1.lr.ph ], [ %mask385706, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %tmp850 = mul i32 %storemerge1799, 11
  %tmp851 = add i32 %27, %tmp850
  %79 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 2) nounwind
  %80 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 1) nounwind
  %81 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 0) nounwind
  %82 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 5) nounwind
  %83 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 4) nounwind
  %84 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 3) nounwind
  %85 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 8) nounwind
  %86 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 7) nounwind
  %87 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 6) nounwind
  %88 = tail call i32 @llvm.trax.loadi(i32 %tmp851, i32 10) nounwind
  %89 = tail call i32 @llvm.trax.loadi(i32 %tmp851, i32 9) nounwind
  %90 = tail call i32 @llvm.trax.loadi(i32 0, i32 9) nounwind
  %91 = mul nsw i32 %88, 25
  %92 = add nsw i32 %90, %91
  %93 = tail call float @llvm.trax.loadf(i32 %92, i32 6) nounwind
  %94 = tail call float @llvm.trax.loadf(i32 %92, i32 5) nounwind
  %95 = tail call float @llvm.trax.loadf(i32 %92, i32 4) nounwind
  %96 = fsub float %81, %84
  %97 = fsub float %80, %83
  %98 = fsub float %79, %82
  %99 = fsub float %84, %87
  %100 = fsub float %83, %86
  %101 = fsub float %82, %85
  %102 = fmul float %70, %101
  %103 = fmul float %100, %tmp684
  %104 = fsub float %102, %103
  %105 = fmul float %99, %tmp684
  %106 = fmul float %tmp676, %101
  %107 = fsub float %105, %106
  %108 = fmul float %100, %tmp676
  %109 = fmul float %99, %70
  %110 = fsub float %108, %109
  %111 = fmul float %104, %96
  %112 = fadd float %111, 0.000000e+00
  %113 = fmul float %107, %97
  %114 = fadd float %113, %112
  %115 = fmul float %110, %98
  %116 = fadd float %115, %114
  %117 = fptosi float %116 to i32
  %118 = fdiv float 1.000000e+00, %116
  %119 = fsub float %8, %87
  %120 = fsub float %tmp692, %86
  %121 = fsub float %tmp696, %85
  %122 = fmul float %104, %119
  %123 = fadd float %122, 0.000000e+00
  %124 = fmul float %107, %120
  %125 = fadd float %124, %123
  %126 = fmul float %110, %121
  %127 = fadd float %126, %125
  %128 = fmul float %127, %118
  %129 = fmul float %120, %98
  %130 = fmul float %97, %121
  %131 = fsub float %129, %130
  %132 = fmul float %96, %121
  %133 = fmul float %119, %98
  %134 = fsub float %132, %133
  %135 = fmul float %97, %119
  %136 = fmul float %96, %120
  %137 = fsub float %135, %136
  %138 = fmul float %131, %tmp676
  %139 = fadd float %138, 0.000000e+00
  %140 = fmul float %134, %70
  %141 = fadd float %140, %139
  %142 = fmul float %137, %tmp684
  %143 = fadd float %142, %141
  %144 = fmul float %143, %118
  %145 = fcmp olt float %144, 0.000000e+00
  br i1 %145, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134, label %bb81.i79

bb81.i79:                                         ; preds = %bb1
  %abscond.i71 = icmp sgt i32 %117, -1
  %neg.i72 = sub i32 0, %117
  %abs.i73 = select i1 %abscond.i71, i32 %117, i32 %neg.i72
  %146 = sitofp i32 %abs.i73 to float
  %147 = fadd float %128, %144
  %148 = fcmp ule float %147, 1.000000e+00
  %not..i74 = fcmp uge float %146, 0x3F50624DE0000000
  %notlhs.i75 = fcmp uge float %128, 0.000000e+00
  %notrhs.i76 = fcmp ule float %128, 1.000000e+00
  %not.or.cond.i77 = and i1 %notrhs.i76, %notlhs.i75
  %149 = and i1 %not.or.cond.i77, %not..i74
  %or.cond559.i78 = and i1 %148, %149
  br i1 %or.cond559.i78, label %bb84.i81, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134

bb84.i81:                                         ; preds = %bb81.i79
  %150 = fmul float %131, %99
  %151 = fadd float %150, 0.000000e+00
  %152 = fmul float %134, %100
  %153 = fadd float %152, %151
  %154 = fmul float %137, %101
  %155 = fadd float %154, %153
  %156 = fmul float %155, %118
  %157 = fcmp olt float %156, 0x3F50624DE0000000
  %158 = fcmp oeq float %156, 1.000000e+10
  %or.cond560.i80 = or i1 %157, %158
  br i1 %or.cond560.i80, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134, label %bb2.i.i82

bb2.i.i82:                                        ; preds = %bb84.i81
  %tmp357 = trunc i512 %mask385707780 to i32
  %tmp358 = bitcast i32 %tmp357 to float
  %159 = fcmp ogt float %tmp358, %156
  br i1 %159, label %bb3.i.i133, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134

bb3.i.i133:                                       ; preds = %bb2.i.i82
  %tmp352 = bitcast float %156 to i32
  %tmp353 = zext i32 %tmp352 to i512
  %160 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 2) nounwind
  %161 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 1) nounwind
  %162 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 0) nounwind
  %163 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 5) nounwind
  %164 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 4) nounwind
  %165 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 3) nounwind
  %166 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 8) nounwind
  %167 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 7) nounwind
  %168 = tail call float @llvm.trax.loadf(i32 %tmp851, i32 6) nounwind
  %169 = tail call i32 @llvm.trax.loadi(i32 %tmp851, i32 10) nounwind
  %170 = tail call i32 @llvm.trax.loadi(i32 %tmp851, i32 9) nounwind
  %tmp159.i83 = bitcast float %162 to i32
  %tmp160.i84 = zext i32 %tmp159.i83 to i480
  %tmp91.i85 = bitcast float %161 to i32
  %tmp92.i86 = zext i32 %tmp91.i85 to i480
  %tmp93.i87 = shl nuw nsw i480 %tmp92.i86, 32
  %tmp85.i88 = bitcast float %160 to i32
  %tmp86.i89 = zext i32 %tmp85.i88 to i480
  %tmp87.i90 = shl nuw nsw i480 %tmp86.i89, 64
  %tmp153.i91 = bitcast float %165 to i32
  %tmp154.i92 = zext i32 %tmp153.i91 to i480
  %tmp155.i93 = shl nuw nsw i480 %tmp154.i92, 96
  %tmp147.i94 = bitcast float %164 to i32
  %tmp148.i95 = zext i32 %tmp147.i94 to i480
  %tmp149.i96 = shl nuw nsw i480 %tmp148.i95, 128
  %tmp141.i97 = bitcast float %163 to i32
  %tmp142.i98 = zext i32 %tmp141.i97 to i480
  %tmp143.i99 = shl nuw nsw i480 %tmp142.i98, 160
  %tmp135.i100 = bitcast float %168 to i32
  %tmp136.i101 = zext i32 %tmp135.i100 to i480
  %tmp137.i102 = shl nuw nsw i480 %tmp136.i101, 192
  %tmp129.i103 = bitcast float %167 to i32
  %tmp130.i104 = zext i32 %tmp129.i103 to i480
  %tmp131.i105 = shl nuw nsw i480 %tmp130.i104, 224
  %tmp123.i106 = bitcast float %166 to i32
  %tmp124.i107 = zext i32 %tmp123.i106 to i480
  %tmp125.i108 = shl nuw nsw i480 %tmp124.i107, 256
  %tmp.i109 = zext i32 %170 to i480
  %tmp81.i110 = shl nuw nsw i480 %tmp.i109, 288
  %171 = tail call i32 @llvm.trax.loadi(i32 0, i32 9) nounwind
  %172 = mul nsw i32 %169, 25
  %173 = add nsw i32 %171, %172
  %174 = tail call float @llvm.trax.loadf(i32 %173, i32 6) nounwind
  %175 = tail call float @llvm.trax.loadf(i32 %173, i32 5) nounwind
  %176 = tail call float @llvm.trax.loadf(i32 %173, i32 4) nounwind
  %tmp115.i111 = bitcast float %176 to i32
  %tmp116.i112 = zext i32 %tmp115.i111 to i480
  %tmp117.i113 = shl nuw nsw i480 %tmp116.i112, 320
  %tmp107.i114 = bitcast float %175 to i32
  %tmp108.i115 = zext i32 %tmp107.i114 to i480
  %tmp109.i116 = shl nuw nsw i480 %tmp108.i115, 352
  %tmp99.i117 = bitcast float %174 to i32
  %tmp100.i118 = zext i32 %tmp99.i117 to i480
  %tmp101.i119 = shl nuw nsw i480 %tmp100.i118, 384
  %ins95.i120 = or i480 %tmp87.i90, %tmp160.i84
  %ins89.i121 = or i480 %ins95.i120, %tmp93.i87
  %ins157.i122 = or i480 %ins89.i121, %tmp143.i99
  %mask144.i123 = or i480 %ins157.i122, %tmp149.i96
  %mask138.masked.masked.masked.masked.masked.masked.masked.masked.i124 = or i480 %mask144.i123, %tmp155.i93
  %mask132.masked.masked.masked.masked.masked.masked.masked.i125 = or i480 %mask138.masked.masked.masked.masked.masked.masked.masked.masked.i124, %tmp125.i108
  %mask126.masked.masked.masked.masked.masked.masked.i126 = or i480 %mask132.masked.masked.masked.masked.masked.masked.masked.i125, %tmp131.i105
  %mask82.masked.masked.masked.masked.masked.i127 = or i480 %mask126.masked.masked.masked.masked.masked.masked.i126, %tmp137.i102
  %mask118.masked.masked.masked.masked.i128 = or i480 %mask82.masked.masked.masked.masked.masked.i127, %tmp81.i110
  %mask110.masked.masked.masked.i129 = or i480 %mask118.masked.masked.masked.masked.i128, %tmp101.i119
  %mask102.masked.masked.i130 = or i480 %mask110.masked.masked.masked.i129, %tmp109.i116
  %ins77.i131 = or i480 %mask102.masked.masked.i130, %tmp117.i113
  %ins.i132 = or i480 %ins77.i131, 770681673391627619131312691654083964084373995933406099189890146314966155308140517402099473489517307419678932548501811235986099843289400054120448
  %tmp347 = zext i480 %ins.i132 to i512
  %tmp348 = shl nuw i512 %tmp347, 32
  %ins350 = or i512 %tmp348, %tmp353
  br label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134

_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134: ; preds = %bb3.i.i133, %bb2.i.i82, %bb84.i81, %bb81.i79, %bb1
  %mask385706 = phi i512 [ %mask385707780, %bb1 ], [ %mask385707780, %bb81.i79 ], [ %mask385707780, %bb84.i81 ], [ %mask385707780, %bb2.i.i82 ], [ %ins350, %bb3.i.i133 ]
  %tmp526 = lshr i512 %mask385706, 32
  %tmp527 = trunc i512 %tmp526 to i32
  %tmp528 = bitcast i32 %tmp527 to float
  %tmp522 = lshr i512 %mask385706, 64
  %tmp523 = trunc i512 %tmp522 to i32
  %tmp524 = bitcast i32 %tmp523 to float
  %tmp514 = lshr i512 %mask385706, 128
  %tmp515 = trunc i512 %tmp514 to i32
  %tmp516 = bitcast i32 %tmp515 to float
  %tmp510 = lshr i512 %mask385706, 160
  %tmp511 = trunc i512 %tmp510 to i32
  %tmp512 = bitcast i32 %tmp511 to float
  %tmp502 = lshr i512 %mask385706, 224
  %tmp490 = lshr i512 %mask385706, 352
  %tmp491 = trunc i512 %tmp490 to i32
  %tmp492 = bitcast i32 %tmp491 to float
  %tmp486 = lshr i512 %mask385706, 384
  %tmp487 = trunc i512 %tmp486 to i32
  %tmp488 = bitcast i32 %tmp487 to float
  %tmp478 = lshr i512 %mask385706, 448
  %tmp479 = trunc i512 %tmp478 to i32
  %tmp480 = bitcast i32 %tmp479 to float
  %tmp474 = lshr i512 %mask385706, 480
  %tmp475 = trunc i512 %tmp474 to i32
  %tmp476 = bitcast i32 %tmp475 to float
  %tmp471 = trunc i512 %mask385706 to i32
  %tmp472 = bitcast i32 %tmp471 to float
  %177 = fmul float %tmp676, %tmp472
  %178 = fmul float %70, %tmp472
  %179 = fmul float %tmp684, %tmp472
  %tmp1910 = bitcast float %177 to i32
  %tmp1911 = zext i32 %tmp1910 to i96
  %tmp1904 = bitcast float %178 to i32
  %tmp1905 = zext i32 %tmp1904 to i96
  %tmp1906 = shl nuw nsw i96 %tmp1905, 32
  %ins1908 = or i96 %tmp1906, %tmp1911
  %tmp1898 = bitcast float %179 to i32
  %tmp1395 = zext i96 %ins1908 to i128
  %mask1396 = and i128 %memtmp4.i92.0792, -79228162514264337593543950336
  %tmp1389 = zext i32 %tmp1898 to i128
  %tmp1390 = shl nuw nsw i128 %tmp1389, 64
  %mask1391 = or i128 %tmp1390, %mask1396
  %ins1392 = or i128 %mask1391, %tmp1395
  %ins1392.tr = trunc i128 %ins1392 to i96
  %tmp1355 = lshr i128 %mask1369, 64
  %tmp1356 = trunc i128 %tmp1355 to i32
  %tmp1357 = bitcast i32 %tmp1356 to float
  %tmp1530 = lshr i96 %ins1392.tr, 64
  %tmp1531 = trunc i96 %tmp1530 to i32
  %tmp1532 = bitcast i32 %tmp1531 to float
  %180 = fadd float %177, %8
  %181 = fadd float %178, %9
  %182 = fadd float %tmp1357, %tmp1532
  %tmp2112 = trunc i512 %tmp514 to i128
  %tmp2113 = and i128 %tmp2112, 79228162495817593519834398720
  %tmp2090 = trunc i512 %tmp526 to i128
  %tmp2091 = and i128 %tmp2090, 79228162495817593519834398720
  %tmp2078 = lshr exact i128 %tmp2091, 64
  %tmp2079 = trunc i128 %tmp2078 to i32
  %tmp2080 = bitcast i32 %tmp2079 to float
  %tmp2142840 = lshr i512 %mask385706, 192
  %tmp2143 = trunc i512 %tmp2142840 to i32
  %tmp2144 = bitcast i32 %tmp2143 to float
  %183 = fsub float %tmp528, %tmp516
  %184 = fsub float %tmp524, %tmp512
  %185 = fsub float %tmp2080, %tmp2144
  %tmp2012 = lshr exact i128 %tmp2113, 64
  %tmp2013 = trunc i128 %tmp2012 to i32
  %tmp2014 = bitcast i32 %tmp2013 to float
  %tmp2166842 = lshr i512 %mask385706, 288
  %tmp2167 = trunc i512 %tmp2166842 to i32
  %tmp2168 = bitcast i32 %tmp2167 to float
  %tmp41.i166 = trunc i512 %tmp502 to i32
  %tmp42.i167 = bitcast i32 %tmp41.i166 to float
  %186 = fsub float %tmp516, %tmp42.i167
  %tmp37.i168761 = lshr i512 %mask385706, 256
  %tmp38.i169 = trunc i512 %tmp37.i168761 to i32
  %tmp39.i170 = bitcast i32 %tmp38.i169 to float
  %187 = fsub float %tmp512, %tmp39.i170
  %188 = fsub float %tmp2014, %tmp2168
  %189 = fmul float %184, %188
  %190 = fmul float %187, %185
  %191 = fsub float %189, %190
  %192 = fmul float %186, %185
  %193 = fmul float %183, %188
  %194 = fsub float %192, %193
  %195 = fmul float %187, %183
  %196 = fmul float %186, %184
  %197 = fsub float %195, %196
  %198 = fmul float %191, %191
  %199 = fmul float %194, %194
  %200 = fadd float %198, %199
  %201 = fmul float %197, %197
  %202 = fadd float %200, %201
  %203 = tail call float @llvm.trax.invsqrt(float %202) nounwind
  %204 = fdiv float 1.000000e+00, %203
  %205 = fdiv float %197, %204
  %206 = fdiv float %194, %204
  %207 = fdiv float %191, %204
  %208 = fmul float %tmp684, %tmp684
  %209 = fadd float %78, %208
  %210 = tail call float @llvm.trax.invsqrt(float %209) nounwind
  %211 = fdiv float 1.000000e+00, %210
  %212 = fdiv float %tmp684, %211
  %213 = fdiv float %70, %211
  %214 = fdiv float %tmp676, %211
  %215 = fmul float %214, %207
  %216 = fadd float %215, 0.000000e+00
  %217 = fmul float %213, %206
  %218 = fadd float %217, %216
  %219 = fmul float %212, %205
  %220 = fadd float %219, %218
  %221 = fcmp ogt float %220, 0.000000e+00
  br i1 %221, label %bb.i, label %bb52.i

bb.i:                                             ; preds = %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134
  %222 = fmul float %207, -1.000000e+00
  %223 = fmul float %206, -1.000000e+00
  %224 = fmul float %205, -1.000000e+00
  %tmp2368 = bitcast float %222 to i32
  %tmp2369 = zext i32 %tmp2368 to i96
  %tmp2362 = bitcast float %223 to i32
  %tmp2363 = zext i32 %tmp2362 to i96
  %tmp2364 = shl nuw nsw i96 %tmp2363, 32
  %ins2366 = or i96 %tmp2369, %tmp2364
  %tmp2356 = bitcast float %224 to i32
  %tmp1263 = zext i96 %ins2366 to i128
  %mask1264 = and i128 %memtmp46.i.1788, -79228162514264337593543950336
  %tmp1257 = zext i32 %tmp2356 to i128
  %tmp1258 = shl nuw nsw i128 %tmp1257, 64
  %mask1259 = or i128 %tmp1263, %mask1264
  %ins1260 = or i128 %mask1259, %tmp1258
  %tmp1245 = lshr i128 %ins1260, 64
  %tmp1246 = trunc i128 %tmp1245 to i32
  %tmp1247 = bitcast i32 %tmp1246 to float
  br label %bb52.i

bb52.i:                                           ; preds = %bb.i, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134
  %N.i.0.0 = phi float [ %222, %bb.i ], [ %207, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134 ]
  %N.i.1.0 = phi float [ %223, %bb.i ], [ %206, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134 ]
  %N.i.2.0 = phi float [ %tmp1247, %bb.i ], [ %205, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134 ]
  %memtmp46.i.0 = phi i128 [ %ins1260, %bb.i ], [ %memtmp46.i.1788, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit134 ]
  %225 = fmul float %tmp480, 0x3FD99999A0000000
  %226 = fsub float %4, %180
  %227 = fsub float %5, %181
  %228 = fsub float %6, %182
  %229 = fmul float %226, %226
  %230 = fmul float %227, %227
  %231 = fadd float %229, %230
  %232 = fmul float %228, %228
  %233 = fadd float %231, %232
  %234 = tail call float @llvm.trax.invsqrt(float %233) nounwind
  %235 = fdiv float 1.000000e+00, %234
  %236 = fdiv float %228, %235
  %237 = fdiv float %227, %235
  %238 = fdiv float %226, %235
  %239 = fmul float %238, %N.i.0.0
  %240 = fadd float %239, 0.000000e+00
  %241 = fmul float %237, %N.i.1.0
  %242 = fadd float %241, %240
  %243 = fmul float %236, %N.i.2.0
  %244 = fadd float %243, %242
  %245 = fcmp ogt float %244, 0.000000e+00
  br i1 %245, label %bb93.i, label %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit

bb93.i:                                           ; preds = %bb52.i
  %246 = tail call float @llvm.trax.invsqrt(float %233) nounwind
  %247 = fdiv float 1.000000e+00, %246
  %248 = tail call i32 @llvm.trax.loadi(i32 0, i32 28) nounwind
  %249 = tail call i32 @llvm.trax.loadi(i32 0, i32 29) nounwind
  br label %bb7.i.i

bb.i.i:                                           ; preds = %bb7.i.i
  %250 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 2) nounwind
  %251 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 1) nounwind
  %252 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 0) nounwind
  %253 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 5) nounwind
  %254 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 4) nounwind
  %255 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 3) nounwind
  %256 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 8) nounwind
  %257 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 7) nounwind
  %258 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 6) nounwind
  %259 = tail call i32 @llvm.trax.loadi(i32 %tmp849, i32 10) nounwind
  %260 = tail call i32 @llvm.trax.loadi(i32 %tmp849, i32 9) nounwind
  %261 = tail call i32 @llvm.trax.loadi(i32 0, i32 9) nounwind
  %262 = mul nsw i32 %259, 25
  %263 = add nsw i32 %261, %262
  %264 = tail call float @llvm.trax.loadf(i32 %263, i32 6) nounwind
  %265 = tail call float @llvm.trax.loadf(i32 %263, i32 5) nounwind
  %266 = tail call float @llvm.trax.loadf(i32 %263, i32 4) nounwind
  %267 = fsub float %252, %255
  %268 = fsub float %251, %254
  %269 = fsub float %250, %253
  %270 = fsub float %255, %258
  %271 = fsub float %254, %257
  %272 = fsub float %253, %256
  %273 = fmul float %237, %272
  %274 = fmul float %271, %236
  %275 = fsub float %273, %274
  %276 = fmul float %270, %236
  %277 = fmul float %238, %272
  %278 = fsub float %276, %277
  %279 = fmul float %271, %238
  %280 = fmul float %270, %237
  %281 = fsub float %279, %280
  %282 = fmul float %275, %267
  %283 = fadd float %282, 0.000000e+00
  %284 = fmul float %278, %268
  %285 = fadd float %284, %283
  %286 = fmul float %281, %269
  %287 = fadd float %286, %285
  %288 = fptosi float %287 to i32
  %289 = fdiv float 1.000000e+00, %287
  %290 = fsub float %180, %258
  %291 = fsub float %181, %257
  %292 = fsub float %182, %256
  %293 = fmul float %275, %290
  %294 = fadd float %293, 0.000000e+00
  %295 = fmul float %278, %291
  %296 = fadd float %295, %294
  %297 = fmul float %281, %292
  %298 = fadd float %297, %296
  %299 = fmul float %298, %289
  %300 = fmul float %291, %269
  %301 = fmul float %268, %292
  %302 = fsub float %300, %301
  %303 = fmul float %267, %292
  %304 = fmul float %290, %269
  %305 = fsub float %303, %304
  %306 = fmul float %268, %290
  %307 = fmul float %267, %291
  %308 = fsub float %306, %307
  %309 = fmul float %302, %238
  %310 = fadd float %309, 0.000000e+00
  %311 = fmul float %305, %237
  %312 = fadd float %311, %310
  %313 = fmul float %308, %236
  %314 = fadd float %313, %312
  %315 = fmul float %314, %289
  %316 = fcmp olt float %315, 0.000000e+00
  br i1 %316, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit, label %bb81.i

bb81.i:                                           ; preds = %bb.i.i
  %abscond.i = icmp sgt i32 %288, -1
  %neg.i = sub i32 0, %288
  %abs.i = select i1 %abscond.i, i32 %288, i32 %neg.i
  %317 = sitofp i32 %abs.i to float
  %318 = fadd float %299, %315
  %319 = fcmp ule float %318, 1.000000e+00
  %not..i = fcmp uge float %317, 0x3F50624DE0000000
  %notlhs.i = fcmp uge float %299, 0.000000e+00
  %notrhs.i = fcmp ule float %299, 1.000000e+00
  %not.or.cond.i = and i1 %notrhs.i, %notlhs.i
  %320 = and i1 %not.or.cond.i, %not..i
  %or.cond559.i = and i1 %319, %320
  br i1 %or.cond559.i, label %bb84.i, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit

bb84.i:                                           ; preds = %bb81.i
  %321 = fmul float %302, %270
  %322 = fadd float %321, 0.000000e+00
  %323 = fmul float %305, %271
  %324 = fadd float %323, %322
  %325 = fmul float %308, %272
  %326 = fadd float %325, %324
  %327 = fmul float %326, %289
  %328 = fcmp olt float %327, 0x3F50624DE0000000
  %329 = fcmp oeq float %327, 1.000000e+10
  %or.cond560.i = or i1 %328, %329
  br i1 %or.cond560.i, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit, label %bb2.i.i

bb2.i.i:                                          ; preds = %bb84.i
  %tmp466 = bitcast i32 %tmp525702.off0 to float
  %330 = fcmp ogt float %tmp466, %327
  br i1 %330, label %bb3.i.i, label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit

bb3.i.i:                                          ; preds = %bb2.i.i
  %tmp460 = bitcast float %327 to i32
  %331 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 2) nounwind
  %332 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 1) nounwind
  %333 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 0) nounwind
  %334 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 5) nounwind
  %335 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 4) nounwind
  %336 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 3) nounwind
  %337 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 8) nounwind
  %338 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 7) nounwind
  %339 = tail call float @llvm.trax.loadf(i32 %tmp849, i32 6) nounwind
  %340 = tail call i32 @llvm.trax.loadi(i32 %tmp849, i32 10) nounwind
  %341 = tail call i32 @llvm.trax.loadi(i32 %tmp849, i32 9) nounwind
  %342 = tail call i32 @llvm.trax.loadi(i32 0, i32 9) nounwind
  %343 = mul nsw i32 %340, 25
  %344 = add nsw i32 %342, %343
  %345 = tail call float @llvm.trax.loadf(i32 %344, i32 6) nounwind
  %346 = tail call float @llvm.trax.loadf(i32 %344, i32 5) nounwind
  %347 = tail call float @llvm.trax.loadf(i32 %344, i32 4) nounwind
  br label %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit

_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit: ; preds = %bb3.i.i, %bb2.i.i, %bb84.i, %bb81.i, %bb.i.i
  %tmp525703.off0 = phi i32 [ %tmp525702.off0, %bb.i.i ], [ %tmp525702.off0, %bb81.i ], [ %tmp525702.off0, %bb84.i ], [ %tmp525702.off0, %bb2.i.i ], [ %tmp460, %bb3.i.i ]
  %tmp469 = bitcast i32 %tmp525703.off0 to float
  %348 = fcmp uge float %tmp469, %247
  %349 = fcmp ule float %tmp469, 0x3F847AE140000000
  %or.cond = or i1 %348, %349
  br i1 %or.cond, label %bb6.i.i, label %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit

bb6.i.i:                                          ; preds = %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit
  %350 = add nsw i32 %351, 1
  br label %bb7.i.i

bb7.i.i:                                          ; preds = %bb6.i.i, %bb93.i
  %tmp525702.off0 = phi i32 [ %tmp471, %bb93.i ], [ %tmp525703.off0, %bb6.i.i ]
  %351 = phi i32 [ 0, %bb93.i ], [ %350, %bb6.i.i ]
  %tmp848 = mul i32 %351, 11
  %tmp849 = add i32 %248, %tmp848
  %352 = icmp slt i32 %351, %249
  br i1 %352, label %bb.i.i, label %bb96.i

bb96.i:                                           ; preds = %bb7.i.i
  %353 = fmul float %tmp476, %244
  %tmp1841 = bitcast float %353 to i32
  %tmp1842 = zext i32 %tmp1841 to i96
  %tmp1837 = shl nuw nsw i96 %tmp1842, 32
  %ins1839 = or i96 %tmp1837, %tmp1842
  %tmp1131 = zext i96 %ins1839 to i128
  %mask1132 = and i128 %memtmp103.i.1785, -79228162514264337593543950336
  %tmp1125 = zext i32 %tmp1841 to i128
  %tmp1126 = shl nuw nsw i128 %tmp1125, 64
  %mask1127 = or i128 %tmp1126, %mask1132
  %ins1128 = or i128 %mask1127, %tmp1131
  %ins1128.tr = trunc i128 %ins1128 to i96
  %354 = fadd float %353, %225
  %tmp1801 = lshr i96 %ins1128.tr, 64
  %tmp1802 = trunc i96 %tmp1801 to i32
  %tmp1803 = bitcast i32 %tmp1802 to float
  %355 = fadd float %tmp1803, %225
  %tmp1796 = bitcast float %354 to i32
  %tmp1797 = zext i32 %tmp1796 to i96
  %tmp1792 = shl nuw nsw i96 %tmp1797, 32
  %ins1794 = or i96 %tmp1792, %tmp1797
  %tmp1784 = bitcast float %355 to i32
  %tmp1109 = zext i96 %ins1794 to i128
  %mask1110 = and i128 %memtmp113.i.1784, -79228162514264337593543950336
  %tmp1103 = zext i32 %tmp1784 to i128
  %tmp1104 = shl nuw nsw i128 %tmp1103, 64
  %mask1105 = or i128 %tmp1109, %mask1110
  %ins1106 = or i128 %mask1105, %tmp1104
  %tmp1091 = lshr i128 %ins1106, 64
  %tmp1092 = trunc i128 %tmp1091 to i32
  %tmp1093 = bitcast i32 %tmp1092 to float
  br label %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit

_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit: ; preds = %bb96.i, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit, %bb52.i
  %light.i.0.0 = phi float [ %354, %bb96.i ], [ %225, %bb52.i ], [ %225, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit ]
  %light.i.2.0 = phi float [ %tmp1093, %bb96.i ], [ %225, %bb52.i ], [ %225, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit ]
  %memtmp113.i.0 = phi i128 [ %ins1106, %bb96.i ], [ %memtmp113.i.1784, %bb52.i ], [ %memtmp113.i.1784, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit ]
  %memtmp103.i.0 = phi i128 [ %ins1128, %bb96.i ], [ %memtmp103.i.1785, %bb52.i ], [ %memtmp103.i.1785, %_ZN8Trigonum10intersectsER9HitRecord3RayRKi.exit ]
  %356 = fmul float %tmp492, %light.i.0.0
  %357 = fmul float %tmp488, %light.i.0.0
  %tmp1688846 = lshr i512 %mask385706, 416
  %tmp1689 = trunc i512 %tmp1688846 to i32
  %tmp1690 = bitcast i32 %tmp1689 to float
  %358 = fmul float %tmp1690, %light.i.2.0
  %tmp1683 = bitcast float %356 to i32
  %tmp1684 = zext i32 %tmp1683 to i96
  %tmp1677 = bitcast float %357 to i32
  %tmp1678 = zext i32 %tmp1677 to i96
  %tmp1679 = shl nuw nsw i96 %tmp1678, 32
  %ins1681 = or i96 %tmp1679, %tmp1684
  %tmp1671 = bitcast float %358 to i32
  %tmp1065 = zext i96 %ins1681 to i128
  %tmp1059 = zext i32 %tmp1671 to i128
  %tmp1060 = shl nuw nsw i128 %tmp1059, 64
  %mask147 = and i128 %memtmp.0781, -79228162514264337593543950336
  %mask = or i128 %tmp1065, %mask147
  %ins = or i128 %mask, %tmp1060
  %ins.tr = trunc i128 %ins to i96
  tail call void @llvm.trax.storef(float %356, i32 %75, i32 0) nounwind
  tail call void @llvm.trax.storef(float %357, i32 %75, i32 1) nounwind
  %tmp371 = lshr i96 %ins.tr, 64
  %tmp372 = trunc i96 %tmp371 to i32
  %tmp373 = bitcast i32 %tmp372 to float
  tail call void @llvm.trax.storef(float %tmp373, i32 %75, i32 2) nounwind
  %359 = add nsw i32 %storemerge1799, 1
  %exitcond = icmp eq i32 %359, %28
  br i1 %exitcond, label %bb12, label %bb1

bb12:                                             ; preds = %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit, %bb
  %memtmp4.i92.0.lcssa = phi i128 [ %memtmp4.i92.1830, %bb ], [ %ins1392, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp46.i.1.lcssa = phi i128 [ %memtmp46.i.2826, %bb ], [ %memtmp46.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp103.i.1.lcssa = phi i128 [ %memtmp103.i.2823, %bb ], [ %memtmp103.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp113.i.1.lcssa = phi i128 [ %memtmp113.i.2822, %bb ], [ %memtmp113.i.0, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %memtmp.0.lcssa = phi i128 [ %memtmp.1819, %bb ], [ %ins, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %mask385707.lcssa = phi i512 [ %ins361, %bb ], [ %mask385706, %_ZN6Shader10lambertianE9HitRecord3Ray10PointLight5Color.exit ]
  %360 = tail call i32 @llvm.trax.atominc(i32 0)
  %361 = icmp sgt i32 %30, %360
  br i1 %361, label %bb, label %return

return:                                           ; preds = %bb12, %entry
  ret i32 0
}

declare i32 @llvm.trax.atominc(i32) nounwind
